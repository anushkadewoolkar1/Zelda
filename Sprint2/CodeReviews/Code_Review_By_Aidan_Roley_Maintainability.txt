Aidan Roley
2/15/2025
Sprint 2
LinkSprite.cs/LinkSpriteFactory.cs (These are very connected and written by the same people so I decided to review both at once)
Roy Volker Acapulco & Kyle Dietrich

* MAINTAINABILITY FOCUS *

LinkSpriteFactory.cs

- First of all, there are many many methods for creating link sprites which each one hard coding the coordinates. This is good enough for a simple Zelda game like this since
it contains all of the needed sprites, but to make it more maintainable one could do a similar approach to ItemSpriteFactory.cs and create a data file which has the sprite 
name and respective coordinates on each line and put it all in a data structures. This way, only a few methods are needed and you could add more sprites in the future without
changing any code.

- Magic numbers everywhere but this falls in the same issue as mentioned above

LinkSprite.cs

- More magic numbers in the MagicalShield method, I can see there are dimensions of rectangles being messed with. Specifically in the switch statement of sourceRectangleDimensions
the numbers 1, 47, 77 could be enumerated or fetched from the spritesheet instead of manually hardcoding values. If more sprites in the game required messing with the
dimensions, it would be easier to have a method that could fetch them from anything instead of hardcoding it for each one.

- I see damageClock is incremented each draw, I think anything that needs to be incremented in that way should probably rely on a timer instead of the frequency
of a method in the code.

- It might help to combine AdjustAttacks() and FixDirection() since they both change the sourceRectangleDimensions. It's a bit confusing having it passed through these 2 
especially when FixDirection() is only a few lines long.

~15 minutes