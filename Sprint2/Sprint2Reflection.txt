TeamTingles
Sprint #2 Reflection:

Sprint #2, although initially starting off slow, ended up serving as a productive introduction to our team working together in a collaborative environment. By the burndown chart, it can be seen that in the first week of the project, only a small amount of work was completed, likely due to everyone not being as comfortable during the first week, affecting the team’s ability to properly communicate and solidify a final design for the system. However, after everyone became more familiar with each other, and all members of the team started to become present at meetings, the rate that work was being completed steadily went up. Many of the components were partially developed during Week 2, preceding the functionality check-in, and were then completed during Week 3. Overall, although this resulted in a heavily concentrated workload during Weeks 2 & 3, everyone was able to complete their assigned component with enough time to spare to properly catch up on the documentation end of the project.
One of the things that benefitted the team during Sprint #2 was a focus on assigning each person to a different component of the project, rather than expecting all members to contribute to all components of the project, which gave the team the convenience of operating remotely from each other, heavily reduced the amount of code conflicts, and essentially gave each member of the group a subproject, giving everyone a distinct process to develop, debug, and intertwine with other components, striking an enjoyable balance between independent and collaborative work. A part of the project that was detrimental is a direct consequence of this choice to assign each member of the team an individual component, that being that design conflicts occurred frequently throughout the code development process, with many different classes having to be entirely reworked so they would be able to correctly interact with other components. The team believes that this can be solved in the future by starting each sprint with developing and then sharing a rough outline of their component’s design, which will in turn allow other team members to keep the design of other components in mind when developing their code, and will hopefully reduce the frequency of design conflicts in future sprints.